package importJAVASE.io;

import com.google.common.base.Function;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Lists;
import guava.base.SpittleUtils;
import lombok.Cleanup;
import org.springframework.util.CollectionUtils;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 *
 * @author cl
 * @version $Id: DataFix3.java v 0.1 18-12-11 下午3:27 cl Exp $$
 */
public class DataFix3 {

    private static List<String> agreementNameStr = AgreementEnum.getNameList();
    private static List<String> allSql = new ArrayList<>();
    private static List<String> deleteSqlList = new ArrayList<>();

    private static int globalAgreementId = 2000000;

    private static int globalTemplateId = 20000;

    public static void main(String[] args) throws Exception {
        String companyIdStt = "351637562502466, 353039869330665, 353319042205694, 13866366, 13866743, 13866838, 13866839, 13867982, 13870540, 13870688, 13870693, 13870694, 13870854, 13872272, 13873569, 13874455, 13881607, 13890789, 13906223, 13949178, 13949181, 13949506, 13950251, 13950536, 13950758, 13950825, 13950826, 13950827, 13950828, 13951079, 13951482, 13964427, 13964476, 13964477, 13964599, 13965631, 13965673, 13966092, 13967976, 13968267, 13979784, 13980380, 13981579, 13988462, 13988801, 13988802, 13988839, 13988845, 13989032, 13989041, 13989138, 13996193, 13997072, 13997796, 13997813, 13997847, 13997868, 13997869, 13998371, 13998655, 13998670, 13998672, 13998722, 13998725, 13998727, 13998728, 13998729, 13998730, 13998734, 13998779, 13998885, 13999769, 13999840, 13999843, 13999844, 13999846, 13999848, 14000239, 14000242, 14000943, 14000945, 14000946, 14000947, 14000948, 14000949, 14000950, 14000963, 14000964, 14000975, 14001149, 14001528, 14001669, 14001672, 14001675, 14001680, 14001682, 14001683, 14001684, 14001685, 14001687, 14001688, 14002073, 14002087, 14002088, 14002090, 14002092, 14002093, 14002256, 14002900, 14003430, 14003431, 14003432, 14003486, 14003493, 14003524, 14003525, 14003865, 14004014, 14004023, 14004951, 14004963, 14004965, 14005101, 14005102, 14005103, 14005105, 14005106, 14005108, 14005109, 14005112, 14005289, 14005308, 14005431, 14005538, 14005610, 14006070, 14006195, 14006236, 14006238, 14006322, 14006447, 14006559, 14006571, 14006708, 14006709, 14006880, 14007150, 14008316, 14008706, 14008838, 14008890, 14008891, 14009145, 14009501, 14009502, 14009581, 14010029, 14010233, 14010238, 14010239, 14010330, 14012467, 14012506, 14013226, 14013228, 14017112, 14017113, 14017210, 14017607, 14017760, 14017893, 14017896, 14017905, 14017906, 14018119, 14018192, 14018357, 14018425, 14018656, 14018658, 14019054, 14019062, 14019210, 14019225, 14019714, 14019826, 14020139, 14020569, 14020570, 14020767, 14021033, 14021035, 14023343, 14023365, 14024060, 14024063, 14025465, 14026298, 14027491, 14027502, 14028243, 14032343, 14032574, 14033302, 14034857, 14042925, 14045924, 14046283, 14046585, 14052486, 14053102, 14054568, 14062598, 14062839, 14066939, 14066964, 14067253, 14067289, 14067463, 14068147, 14068168, 14068374, 14070014, 14071551, 14072310, 14073343, 14077490, 14078612, 14090881, 14092391, 14095062, 14099362, 26980909908, 26984006487, 27078165337, 27078198106, 27079525243, 126999464, 127021989, 127023270, 127023508, 127025936, 127026351, 127041853, 127046433, 127056002, 127057760, 127079219, 127085253, 127085260, 127087290, 127087501, 127094248, 127094667, 127097211, 127098176, 127098838, 127105147, 127107455, 127107880, 127107882, 127107886, 127107890, 127107896, 127109742, 127109744, 127110560, 127115708, 127115711, 127116134, 127116142, 127116143, 127116146, 127116151, 127116154, 127116156, 127116593, 127116719, 127118669, 127119750, 127121407, 127122159, 127123226, 127124074, 127124951, 127124952, 127124955, 127124958, 127124960, 127127178, 127542672, 127545381, 127545396, 127545422, 127547147, 127547814, 127553031, 127560133, 127567853, 127588108, 127590857, 127591657, 127591668, 127598566, 127603740, 127608258, 127609368, 127613093, 127615024, 127679439, 127679446, 127679451, 127691183, 127691228, 127715865, 127716552, 127716650, 127716660, 127716759, 127719085, 127720740, 127720774, 127728922, 127728932, 127728943, 127728946, 127728950, 127729083, 127741112, 127741132, 127741138, 127741141, 127741144, 127747640, 127751609, 127751655, 127751659, 127751662, 127753166, 127753186, 127753190, 127758368, 127762869, 127763443, 127765919, 127765922, 127765941, 127765944, 127766025, 127766034, 127766041, 127768342, 127769159, 127774604, 127774636, 127774752, 127774755, 127774762, 127779810, 127781950, 127789893, 127789895, 127789900, 127789903, 127797764, 127797770, 127807128, 127807861, 127812787, 127812793, 127812801, 127812809, 127812814, 127813028, 127814601, 127814619, 127814639, 127814647, 127814655, 127815391, 127821994, 127822708, 127822711, 127822716, 127822722, 127822727, 127822728, 127822735, 127833639, 127843690, 127844746, 127844753, 127847994, 127848002, 127857955, 127858713, 127858721, 127860640, 127867962, 127870626, 127870632, 127878710, 26055967574, 26198016852, 26199081814, 26199081821, 26236027773, 27138769744, 27215856478, 27244266324, 27280262002, 27313947519, 27314078589, 27314504568, 27319010139, 27320157041, 27320173427, 200228, 200305, 200437, 300074, 300426, 300469, 300594, 300595, 300609, 300610, 300671, 508762, 601234, 601235, 601238, 601240, 601241, 601242, 601243, 611006, 620396, 625895, 625896, 627845, 24896881521, 24898093908, 24922375025, 24931992401, 24933565306, 24995709790, 25024267127, 25027543927, 25053594461, 25056445274, 25072665424, 25072665437, 25085494109, 25089508183, 25089540948, 25090245494, 25108071251, 25118180210, 25133794166, 24435639129, 24435688283, 24437359475, 24444404605, 24488231774, 24499553104, 24502059864, 24506450812, 24506663766, 24538923871, 24552129392, 24658199382, 24717411186, 24750113627, 24766514010, 24766628733, 24827790168, 24832066425, 24832623477, 24843436887, 24845992793, 24895538013, 127129604, 127131724, 127132875, 127134190, 127135849, 127136766, 127136798, 127139135, 127141807, 127143915, 127147855, 127151486, 127153293, 127153302, 127178175, 127178255, 127197795, 127199569, 127201586, 127208043, 127210916, 127215736, 127217807, 127217881, 127224662, 127227093, 127227695, 127229888, 127240794, 127246577, 127246760, 127246763, 127246770, 127246814, 127246820, 127246828, 127246834, 127246837, 127253211, 127257228, 127260015, 127260192, 127260195, 127260204, 127260214, 127260218, 127260229, 127260235, 127263800, 127275027, 127275050, 127278926, 127284045, 127289220, 127292673, 127295021, 127296443, 127296473, 127300842, 127302522, 127302531, 127302536, 127302539, 127302541, 127302546, 127302551, 127302553, 127318345, 127338769, 127352606, 127354494, 127355843, 127359196, 127359742, 127364197, 127364202, 127365425, 127365428, 127368923, 127370765, 127374342, 127390735, 127390737, 127390740, 127390745, 127390746, 127393274, 127395660, 127395662, 127396221, 127400893, 127400972, 127400978, 127400979, 127400983, 127410421, 127417214, 127417217, 127417220, 127417222, 127417256, 127429148, 127445243, 127450363, 127451427, 127453460, 127456834, 127472433, 127883025, 127895737, 127899301, 127906358, 127907017, 127910175, 127919843, 127921217, 127965936, 127975073, 127984133, 127990114, 128006531, 128012952, 128018881, 128018893, 128018917, 128020149, 128020158, 128022901, 23837492085, 23856808825, 23857070972, 23883957076, 23884022608, 23885824880, 23886562171, 23917478782, 23918003069, 23956259671, 23958487934, 23985423224, 23987143544, 23994778490, 24018781045, 24195859290, 25391448948, 25481741146, 25513427828, 25527845744, 25528697712, 25554322300, 25566544762, 25148998519, 25150948216, 25197577085, 25197691773, 25219810141, 25229345661, 28826583933, 29328098165, 29332587344, 29332587352, 29471687519, 29472785264, 24217715546, 24256316280, 24286430073, 24293884753, 24295703409, 24323015550, 24347509627, 24362238843, 24366105471, 24380506995, 30109991770, 26326631254, 26381484890, 26382910329, 26383713142, 26422723423, 26459456344, 26459456351, 26463323007, 26496287573, 26497680246, 26560496496, 26600194910, 26600997758, 26682999640, 25625084795, 25678529368, 25678578517, 25679692664, 25680003964, 25680020344, 25680053113, 25680085884, 25695699838, 25711231830, 25712542545, 25714017136, 25978405723, 25979880312, 26031768414, 27955053437, 27955086200, 27955184499, 26755662704, 26778370902, 27995145082, 29605249912, 29620536176, 29620618105, 29631972191, 29793338203, 29796451160, 29797499766, 29801104240, 30218535804, 30258578263, 30287676272, 33137476436, 33137541975, 31374246748, 31864308573, 32441402193, 32442647419, 32634241886, 32634995537, 32635011931, 32635044695, 32636044157, 32636109690, 32873235291, 33462584188, 33463665520, 34485732178, 33044480854, 33046102909, 34327249785, 8135462627606391, 33577501557, 33612727129, 33681113951, 33681998704, 33682064240, 33682080632, 33682146162, 33682195320, 33751778133, 35345761108, 35346957172, 351948947631855, 351979012402596, 352457901262596, 352462196223143, 352528768223087, 352636142398597, 352640437372032, 352640437372784, 352655469751508, 352898135410423, 352908872828088, 8135052458228746, 8135071785583714, 8189589952956350, 8189630755145247, 8189768194098647, 8189778931517421, 8189781079001081, 8189929255372219, 8186881976073974, 8186995792707434, 8186377317415996, 8186379464900287, 8186443889409948, 8190479011186104";

        String contractCompanyIdStr = ",300074,300609,620396,627845,13866743,13866839,13867982,13870540,13870854,13873569,13874455,13881607,13890789,13906223,13949178,13949181,13950758,13950825,13950827,13951079,13964599,13965673,13967976,13979784,13980380,13988801,13988845,13996193,13997072,13997796,13998371,13998670,13998722,13998729,13998734,13998779,13998885,13999843,14000239,14000945,14000946,14001149,14001528,14001669,14001672,14001675,14001683,14001684,14001685,14001687,14002087,14002092,14002093,14002256,14002900,14003431,14003486,14003865,14004014,14004023,14004951,14004963,14004965,14005101,14005102,14005103,14005105,14005106,14005108,14005289,14005538,14005610,14006070,14006195,14006236,14006559,14006571,14006708,14006709,14007150,14008838,14008890,14008891,14010029,14010233,14012506,14017210,14017893,14017896,14017905,14017906,14018119,14018357,14018425,14019714,14020570,14020767,14024063,14025465,14034857,14046283,14046585,14062839,14066939,14067463,14078612,127021989,127023270,127025936,127046433,127079219,127085253,127085260,127087290,127087501,127094248,127094667,127097211,127098176,127105147,127107455,127107880,127109742,127115711,127116142,127116146,127116151,127119750,127123226,127124074,127127178,127129604,127131724,127132875,127134190,127135849,127136766,127139135,127141807,127143915,127151486,127153302,127178175,127178255,127199569,127201586,127208043,127215736,127217881,127227093,127227695,127229888,127246814,127246820,127253211,127275027,127278926,127292673,127296443,127300842,127302536,127302539,127302541,127338769,127364197,127368923,127374342,127390745,127395662,127396221,127410421,127417214,127429148,127445243,127451427,127453460,127456834,127472433,127542672,127545381,127545422,127547147,127553031,127560133,127567853,127590857,127591657,127598566,127609368,127613093,127679439,127679446,,127679451,127691183,127716660,127719085,127720740,127728943,127741112,127741144,127751609,127753166,127753190,127762869,127763443,127766025,127766034,127766041,127768342,127769159,127781950,127807861,127812814,127813028,127822716,127822735,127833639,127843690,127844746,127847994,127848002,127858713,127860640,127867962,127878710,127895737,127907017,127921217,127965936,127975073,127984133,128006531,128018881,128018893,128022901,23857070972,23883957076,23885824880,23917478782,23956259671,23985423224,23987143544,24018781045,24217715546,24286430073,24323015550,24347509627,24444404605,24488231774,24499553104,24502059864,24506450812,24506663766,24658199382,24717411186,24750113627,24766514010,24766628733,24832066425,24843436887,24845992793,24895538013,24933565306,24995709790,25027543927,25072665424,25072665437,25085494109,25089540948,25108071251,25118180210,25133794166,25148998519,25150948216,25197577085,25229345661,25481741146,25527845744,25554322300,25566544762,25625084795,25680085884,25712542545,25714017136,26031768414,26055967574,26198016852,26236027773,26422723423,26459456344,26463323007,26560496496,26600194910,26600997758,26682999640,26980909908,30287676272,351637562502466,351948947631855,352462196223143,352528768223087,352640437372032,352640437372784,352908872828088,353039869330665,353319042205694,8135071785583714,8135462627606391,8186377317415996,8186443889409948,8186881976073974,8186995792707434,8189589952956350,8189768194098647,8189781079001081,8189929255372219,8190479011186104";
        List<String> list = SpittleUtils.stringToList(companyIdStt, ",");
        List<String> list1 = SpittleUtils.stringToList(contractCompanyIdStr, ",");

        //所有的机构
        List<String> allCompanyList = Lists.newArrayList(list);

        //用用合同的机构
        List<String> contractCompanyList = Lists.newArrayList(list1);

        //服务项
        ArrayListMultimap<String, Agreement> agreementMap = getAgreementMap();

        //合同模板
        ArrayListMultimap<String, Template> templateMap = getTemplateMap();

        for (String companyId : allCompanyList) {
            List<Agreement> agreementList = agreementMap.get(companyId);

            Map<String, Agreement> nameAgreementMap = agreementList.stream().collect(Collectors.toMap(Agreement::getName, x -> x));

            List<Template> templateList = templateMap.get(companyId);

            boolean hasContract = contractCompanyList.contains(companyId);

            //删除的服务项id列表
            List<Integer> deleteAgreementIdList = new ArrayList<>();

            List<AgreementEnum> needInsertHandle = new ArrayList<>();
            List<Agreement> ownedHandle = new ArrayList<>();
            //如果没有合同也没有合同模板
            if (!hasContract && CollectionUtils.isEmpty(templateList)) {
                //新增合同模板 和 服务项
                deleteAgreementIdList.addAll(getId(agreementList));
                needInsertHandle = AgreementEnum.getList();
                handleDelete(companyId, deleteAgreementIdList);
            } else {

                List<String> agreementNameList = getName(agreementList);
                for (String str : agreementNameStr) {
                    if (!agreementNameList.contains(str)) {
                        needInsertHandle.add(AgreementEnum.getByName(str));
                    } else {
                        ownedHandle.add(nameAgreementMap.get(str));
                    }
                }
            }
            handleInsert(ownedHandle, companyId, needInsertHandle);
        }

        File fileOut = new File("/home/c/Documents/datafix/datafix4.sql");
       // File fileOut = new File("/home/c/workspace/xdeploy/sql_changed_prod_manage_datafix_20181211xxxxxx.sql");
        @Cleanup FileOutputStream fos = new FileOutputStream(fileOut);
        @Cleanup OutputStreamWriter osw = new OutputStreamWriter(fos);
        for (String sql : deleteSqlList) {
            osw.write(sql + ";\n");
        }
        System.out.println(allSql.size());
        System.out.println(deleteSqlList.size());

    }

    private static void handleDelete(String companyId, List<Integer> deleteAgreementIdList) {
        for (Integer id : deleteAgreementIdList) {
            String deleteSql = "update am_cm_service_management set available='N', modify_date=now(), modifier_id=-1 where company_id=" + companyId + " and id = " + id;
            deleteSqlList.add(deleteSql);
        }
    }

    private static void handleInsert(List<Agreement> ownedHandle, String companyId, List<AgreementEnum> needHandle) {
        //合同模板
        Map<String, Integer> templateMap = new HashMap<>();
        for (TemplateEnum template : TemplateEnum.getList()) {
            Integer type = 2;
            if (template.equals(TemplateEnum.DZ)) {
                type = 1;
            }
            String agreementSql = "insert am_cm_contract_template(id, company_id, name,"
                    + "type, available, creator_id,"
                    + "create_date,modifier_id,modify_date"
                    + ") values(" + globalTemplateId + "," + companyId + ",\'"
                    + template.getName() + "\'," + type + ",\'Y\'," +
                    "-1,sysdate(),-1,sysdate())";
            allSql.add(agreementSql);
            templateMap.put(template.getAgreementName(), globalTemplateId);
            globalTemplateId++;
        }

        for (AgreementEnum agreementEnum : needHandle) {
            String agreementSql = "insert am_cm_service_management(id,name,company_id,short_name,type,"
                    + "price,charge_unit,module,base,state,available,creator_id,create_date,modifier_id,modify_date"
                    + ") values(" + globalAgreementId + ",\'" + agreementEnum.getName() + "\',"
                    + companyId + ",\'" + agreementEnum.getShortName() + "\'," + agreementEnum.getType() + ","
                    + agreementEnum.getPrice() + "," + agreementEnum.getUnit() +
                    ",3,1,1,\'Y\',-1,sysdate(),-1,sysdate())";
            Agreement agreement = new Agreement();
            agreement.setId(globalAgreementId);
            agreement.setName(agreementEnum.getName());
            ownedHandle.add(agreement);
            allSql.add(agreementSql);
            globalAgreementId++;
        }

        for (Agreement agreement : ownedHandle) {
            Integer templateId = templateMap.get(agreement.getName());
            if (agreement.getName().equals("账本费")) {
                templateId = templateMap.get("记账报税");
            }
            String templateAgreement = "insert into am_cm_contract_template_agreement (company_id, template_id,"
                    + "        agreement_id, available, creator_id,"
                    + "        modifier_id, create_date, modify_date"
                    + "        )"
                    + "        values (" + companyId + "," + templateId + "," + agreement.getId()
                    + ",\'Y\',-1,-1,sysdate(),sysdate()" +
                    ")";
            allSql.add(templateAgreement);
        }
    }

    private static List<String> getName(List<Agreement> agreementList) {
        return Lists.transform(agreementList, new Function<Agreement, String>() {
            @Override public String apply(Agreement agreement) {
                return agreement.getName();
            }
        });
    }

    private static List<Integer> getId(List<Agreement> agreementList) {
        return agreementList.stream().map(x -> x.getId()).collect(Collectors.toList());
    }

    private static List<String> getContractCompanyId() throws Exception {

        File file = new File("/home/c/Documents/datafix/contract_company.txt");
        List<String> list = new ArrayList<>();
        @Cleanup FileInputStream fis = new FileInputStream(file);
        @Cleanup InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader bufferedReader = new BufferedReader(isr);
        String line;
        while ((line = bufferedReader.readLine()) != null && !line.equals("")) {
            list.add(line.trim());
        }
        return list;
    }

    private static ArrayListMultimap<String, Agreement> getAgreementMap() throws Exception {
        File file = new File("/home/c/Documents/datafix/agreement.txt");

        ArrayListMultimap<String, Agreement> agreementMap = ArrayListMultimap.create();

        @Cleanup FileInputStream fis = new FileInputStream(file);
        @Cleanup InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader bufferedReader = new BufferedReader(isr);
        String line;
        while ((line = bufferedReader.readLine()) != null && !line.equals("")) {
            String[] strings = line.split("\t");
            Agreement agreement = new Agreement();
            agreement.setId(Integer.parseInt(strings[0]));
            agreement.setCompanyId(strings[2]);
            agreement.setName(strings[1]);
            agreement.setType(strings[3]);
            agreement.setUnit(strings[4]);
            agreementMap.put(agreement.getCompanyId(), agreement);
        }
        return agreementMap;
    }

    private static ArrayListMultimap<String, Template> getTemplateMap() throws Exception {
        File file = new File("/home/c/Documents/datafix/template.txt");

        ArrayListMultimap<String, Template> templateMap = ArrayListMultimap.create();

        @Cleanup FileInputStream fis = new FileInputStream(file);
        @Cleanup InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader bufferedReader = new BufferedReader(isr);
        String line;
        while ((line = bufferedReader.readLine()) != null && !line.equals("")) {
            String[] strings = line.split("\t");
            Template template = new Template();
            template.setId(Integer.parseInt(strings[0]));
            template.setCompanyId(strings[1]);
            template.setName(strings[2]);
            template.setType(Integer.parseInt(strings[3]));
            templateMap.put(template.getCompanyId(), template);
        }
        return templateMap;
    }
}